package com.kgaft.VulkanContext.Vulkan.VulkanRenderPass;

import com.kgaft.VulkanContext.Exceptions.BuilderNotPopulatedException;
import com.kgaft.VulkanContext.Vulkan.VulkanDevice.VulkanDevice;
import com.kgaft.VulkanContext.Vulkan.VulkanImage.ImageTarget;
import com.kgaft.VulkanContext.Vulkan.VulkanImage.VulkanImage;
import com.kgaft.VulkanContext.Vulkan.VulkanImage.VulkanImageBuilder;
import com.kgaft.VulkanContext.Vulkan.VulkanImage.VulkanImageView;
import org.lwjgl.system.MemoryStack;
import org.lwjgl.vulkan.*;

import java.util.ArrayList;
import java.util.List;

import static org.lwjgl.vulkan.VK10.*;

public class VulkanRenderPass {
    private VulkanDevice device;
    private long renderPass;
    private List<VulkanFrameBuffer> frameBuffers = new ArrayList<>();
    private List<VulkanImage> depthAttachments = new ArrayList<>();
    private List<VulkanImage> colorAttachments;
    private VulkanImage depthImage;

    public VulkanRenderPass(VulkanDevice device, VulkanRenderPassBuilder builder) throws BuilderNotPopulatedException {
        this.device = device;
        builder.checkBuilder();
        if(builder.isAutoGenerateDepthImages()){
            autoGenerateDepthImages(builder.getColorAttachments().size()/ builder.getImagePerStepAmount());
        }
        else{
            depthAttachments = builder.getDepthAttachments();
        }
        colorAttachments = builder.getColorAttachments();
        createRenderPass(builder);
    }


    private void createRenderPass(VulkanRenderPassBuilder renderPassBuilder) {
        try (MemoryStack stack = MemoryStack.stackPush()) {
            VkAttachmentDescription.Buffer attachments = VkAttachmentDescription.calloc(colorAttachments.size() + 1, stack);
            prepareAttachmentDescription(attachments);
            attachments.rewind();
            VkAttachmentReference.Buffer references = VkAttachmentReference.calloc(renderPassBuilder.getImagePerStepAmount(), stack);
            VkAttachmentReference depthAttachmentRef = VkAttachmentReference.calloc(stack);

            prepareReference(references, depthAttachmentRef);
            references.rewind();

            VkSubpassDescription.Buffer subpass = VkSubpassDescription.calloc(1, stack);
            subpass.pipelineBindPoint(VK_PIPELINE_BIND_POINT_GRAPHICS);
            subpass.pColorAttachments(references);
            subpass.pDepthStencilAttachment(depthAttachmentRef);

            subpass.pInputAttachments(null);
            subpass.pResolveAttachments(null);

            VkSubpassDependency.Buffer dependency = VkSubpassDependency.calloc(1, stack);
            dependency.dstSubpass(0);
            dependency.dstAccessMask(VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT | VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT);
            dependency.dstStageMask(VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT | VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT);
            dependency.srcSubpass(VK_SUBPASS_EXTERNAL);
            dependency.srcAccessMask(0);
            dependency.srcStageMask(VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT | VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT);

            VkRenderPassCreateInfo renderPassInfo = VkRenderPassCreateInfo.calloc(stack);
            renderPassInfo.sType$Default();
            renderPassInfo.pAttachments(attachments);
            renderPassInfo.pSubpasses(subpass);
            renderPassInfo.pDependencies(dependency);

            long[] res = new long[1];
            if (vkCreateRenderPass(device.getDevice(), renderPassInfo, null, res) != VK_SUCCESS) {
                throw new RuntimeException("failed to create render pass!");
            }
            this.renderPass = res[0];
        }

    }



    private void autoGenerateDepthImages(int renderImageAmount) {
        try {
            VulkanImageBuilder imageBuilder = new VulkanImageBuilder();
            imageBuilder.setTiling(VK_IMAGE_TILING_OPTIMAL);
            imageBuilder.setWidth(colorAttachments.get(0).getWidth());
            imageBuilder.setHeight(colorAttachments.get(0).getHeight());
            imageBuilder.setSamples(VK_SAMPLE_COUNT_1_BIT);
            imageBuilder.setSharingMode(VK_SHARING_MODE_EXCLUSIVE);
            imageBuilder.setRequiredUsage(VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_IMAGE_USAGE_TRANSFER_SRC_BIT);
            imageBuilder.setFormat(VulkanImage.findDepthFormat(device));
            imageBuilder.setImageMemoryProperties(VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
            imageBuilder.setMipLevels(0);
            imageBuilder.setArraySize(renderImageAmount);
            imageBuilder.setInitialLayout(VK_IMAGE_LAYOUT_UNDEFINED);
            depthImage = new VulkanImage(device, imageBuilder);
            depthAttachments.add(depthImage);

        } catch (BuilderNotPopulatedException e) {
            throw new RuntimeException(e);
        }

    }

    private void prepareAttachmentDescription(VkAttachmentDescription.Buffer result) {
        for (int i = 0; i<result.capacity()-1; i++) {
            result.format(colorAttachments.get(i).getImageFormat());
            result.samples(colorAttachments.get(i).getSamples());
            result.loadOp(VK_ATTACHMENT_LOAD_OP_CLEAR);
            result.storeOp(VK_ATTACHMENT_STORE_OP_STORE);
            result.stencilStoreOp(VK_ATTACHMENT_STORE_OP_DONT_CARE);
            result.stencilLoadOp(VK_ATTACHMENT_LOAD_OP_DONT_CARE);
            result.initialLayout(VK_IMAGE_LAYOUT_UNDEFINED);
            result.finalLayout(colorAttachments.get(i).getImageLayout());
            result.get();
        }
        result.format(depthAttachments.get(0).getImageFormat());
        result.samples(depthAttachments.get(0).getSamples());
        result.loadOp(VK_ATTACHMENT_LOAD_OP_CLEAR);
        result.storeOp(VK_ATTACHMENT_STORE_OP_DONT_CARE);
        result.stencilLoadOp(VK_ATTACHMENT_LOAD_OP_DONT_CARE);
        result.stencilStoreOp(VK_ATTACHMENT_STORE_OP_DONT_CARE);
        result.initialLayout(VK_IMAGE_LAYOUT_UNDEFINED);
        result.finalLayout(depthAttachments.get(0).getImageLayout());
    }


    private void prepareReference(VkAttachmentReference.Buffer references, VkAttachmentReference depthAttachment) {
        int count = 0;
        for (int i = 0; i<references.capacity(); i++) {
            references.attachment(count);
            references.layout(colorAttachments.get(i).getImageLayout());
            references.get();
            count++;
        }
        depthAttachment.attachment(count);
        depthAttachment.layout(depthAttachments.get(0).getImageLayout());
    }


}
