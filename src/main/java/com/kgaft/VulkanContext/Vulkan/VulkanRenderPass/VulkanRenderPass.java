package com.kgaft.VulkanContext.Vulkan.VulkanRenderPass;

import com.kgaft.VulkanContext.Exceptions.BuilderNotPopulatedException;
import com.kgaft.VulkanContext.Vulkan.VulkanDevice.VulkanDevice;
import com.kgaft.VulkanContext.Vulkan.VulkanImage.ImageTarget;
import com.kgaft.VulkanContext.Vulkan.VulkanImage.VulkanImage;
import com.kgaft.VulkanContext.Vulkan.VulkanImage.VulkanImageBuilder;
import com.kgaft.VulkanContext.Vulkan.VulkanImage.VulkanImageView;
import org.lwjgl.system.MemoryStack;

import java.util.ArrayList;
import java.util.List;

import static org.lwjgl.vulkan.VK10.*;

public class VulkanRenderPass {
    private VulkanDevice device;
    private long renderPass;
    private List<VulkanFrameBuffer> frameBuffers = new ArrayList<>();
    private List<VulkanImageView> depthAttachments = new ArrayList<>();
    private List<VulkanImageView> colorAttachments = new ArrayList<>();
    private VulkanImage depthImage;

    public VulkanRenderPass(VulkanDevice device, VulkanRenderPassBuilder builder) throws BuilderNotPopulatedException {
        this.device = device;
        builder.checkBuilder();
    }

    private void autoGenerateDepthImages(int renderImageAmount) {
        try {
            VulkanImageBuilder imageBuilder = new VulkanImageBuilder();
            imageBuilder.setTiling(VK_IMAGE_TILING_OPTIMAL);
            imageBuilder.setWidth(colorAttachments.get(1).getImage().getWidth());
            imageBuilder.setHeight(colorAttachments.get(1).getImage().getHeight());
            imageBuilder.setSamples(VK_SAMPLE_COUNT_1_BIT);
            imageBuilder.setSharingMode(VK_SHARING_MODE_EXCLUSIVE);
            imageBuilder.setRequiredUsage(VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT | VK_IMAGE_USAGE_TRANSFER_SRC_BIT);
            imageBuilder.setFormat(findDepthFormat());
            imageBuilder.setImageMemoryProperties(VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
            imageBuilder.setMipLevels(0);
            imageBuilder.setArraySize(renderImageAmount);
            imageBuilder.setInitialLayout(VK_IMAGE_LAYOUT_UNDEFINED);
            depthImage = new VulkanImage(device, imageBuilder);
            try(MemoryStack stack = MemoryStack.stackPush()){
                ImageTarget imageTarget = new ImageTarget();
                imageTarget.setMipLevel(0);
                imageTarget.setMipLevelCount(1);
                imageTarget.setLayersAmount(1);
                for (int i = 0; i < renderImageAmount; i++) {
                    depthAttachments.add(depthImage.acquireImageView(stack, VK_IMAGE_VIEW_TYPE_2D, imageTarget));
                    imageTarget.setStartLayerIndex(imageTarget.getStartLayerIndex()+1);
                }

            }

        } catch (BuilderNotPopulatedException e) {
            throw new RuntimeException(e);
        }

    }

    private int findDepthFormat() {
        List<Integer> candidates = new ArrayList<>();
        candidates.add(VK_FORMAT_D32_SFLOAT);
        candidates.add(VK_FORMAT_D32_SFLOAT_S8_UINT);
        candidates.add(VK_FORMAT_D24_UNORM_S8_UINT);
        return device.findSupportedFormat(candidates,
                VK_IMAGE_TILING_OPTIMAL,
                VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT
        );
    }
}
